---
import { getLangFromUrl, useTranslations } from '../utils/i18n';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

interface Props {
  currentPath?: string;
}

const { currentPath } = Astro.props;
---

<nav class="fixed top-0 left-0 right-0 z-50 bg-slate-950/95 backdrop-blur-sm border-b border-slate-800">
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href={`/${lang}/`} class="flex items-center space-x-2">
          <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
            <span class="text-white font-bold text-sm">PG</span>
          </div>
          <span class="text-xl font-bold text-slate-100">PortoGate</span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-8">
          <a href={`/${lang}/`} class="text-slate-300 hover:text-blue-400 px-3 py-2 text-sm font-medium transition-colors">
            {t('nav.home')}
          </a>
          <a href={`/${lang}/docs/`} class="text-slate-300 hover:text-blue-400 px-3 py-2 text-sm font-medium transition-colors">
            {t('nav.docs')}
          </a>
          <a href={`/${lang}/#pricing`} class="text-slate-300 hover:text-blue-400 px-3 py-2 text-sm font-medium transition-colors">
            {t('nav.pricing')}
          </a>
          <a href={`/${lang}/#faq`} class="text-slate-300 hover:text-blue-400 px-3 py-2 text-sm font-medium transition-colors">
            {t('nav.faq')}
          </a>
        </div>
      </div>

      <!-- Language Switcher -->
      <div class="flex items-center space-x-4">
        <div class="flex items-center space-x-2">
          <a 
            href={currentPath?.replace(/^\/(ru|en)/, '/ru') || '/ru/'} 
            class={`px-2 py-1 text-sm rounded ${lang === 'ru' ? 'bg-blue-600 text-white' : 'text-slate-400 hover:text-slate-200'}`}
          >
            RU
          </a>
          <a 
            href={currentPath?.replace(/^\/(ru|en)/, '/en') || '/en/'} 
            class={`px-2 py-1 text-sm rounded ${lang === 'en' ? 'bg-blue-600 text-white' : 'text-slate-400 hover:text-slate-200'}`}
          >
            EN
          </a>
        </div>

        <!-- Mobile menu button -->
        <div class="md:hidden">
          <button 
            type="button" 
            class="mobile-menu-button text-slate-400 hover:text-slate-200 p-2"
            aria-controls="mobile-menu" 
            aria-expanded="false"
          >
            <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div class="mobile-menu hidden md:hidden pb-4">
      <div class="px-2 pt-2 pb-3 space-y-1">
        <a href={`/${lang}/`} class="text-slate-300 hover:text-blue-400 block px-3 py-2 text-base font-medium">
          {t('nav.home')}
        </a>
        <a href={`/${lang}/docs/`} class="text-slate-300 hover:text-blue-400 block px-3 py-2 text-base font-medium">
          {t('nav.docs')}
        </a>
        <a href={`/${lang}/#pricing`} class="text-slate-300 hover:text-blue-400 block px-3 py-2 text-base font-medium">
          {t('nav.pricing')}
        </a>
        <a href={`/${lang}/#faq`} class="text-slate-300 hover:text-blue-400 block px-3 py-2 text-base font-medium">
          {t('nav.faq')}
        </a>
      </div>
    </div>
  </div>
</nav>

<script>
  // Mobile menu toggle
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.querySelector('.mobile-menu-button');
    const mobileMenu = document.querySelector('.mobile-menu');

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        const isHidden = mobileMenu.classList.contains('hidden');
        if (isHidden) {
          mobileMenu.classList.remove('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'true');
        } else {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
        }
      });
    }
  });
</script>
